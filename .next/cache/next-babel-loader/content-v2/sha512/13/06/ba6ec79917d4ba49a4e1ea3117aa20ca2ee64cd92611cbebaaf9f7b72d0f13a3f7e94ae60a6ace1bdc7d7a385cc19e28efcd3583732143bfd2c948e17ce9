{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducer from \"../reducers\";\nimport rootSaga from \"../sagas\";\nexport var makeStore = function makeStore(context) {\n  // 1: Create the middleware\n  var sagaMiddleware = createSagaMiddleware(); // 2: Add an extra parameter for applying middleware:\n\n  var store = createStore(reducer, composeWithDevTools(applyMiddleware(sagaMiddleware))); // 3: Run your sagas on server\n\n  store.sagaTask = sagaMiddleware.run(rootSaga); // 4: now return the store:\n\n  return store;\n};\nexport var wrapper = createWrapper(makeStore);","map":{"version":3,"sources":["/Users/gadamer1/Documents/스타트업/next-sample/next-sample/Components/store.ts"],"names":["createStore","applyMiddleware","createWrapper","createSagaMiddleware","composeWithDevTools","reducer","rootSaga","makeStore","context","sagaMiddleware","store","sagaTask","run","wrapper"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAAoD,OAApD;AACA,SAAoBC,aAApB,QAAkD,oBAAlD;AACA,OAAOC,oBAAP,MAA2C,YAA3C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;AAOA,OAAO,IAAMC,SAA2B,GAAG,SAA9BA,SAA8B,CAACC,OAAD,EAAsB;AAC/D;AACA,MAAMC,cAAc,GAAGN,oBAAoB,EAA3C,CAF+D,CAI/D;;AACA,MAAMO,KAAK,GAAGV,WAAW,CACvBK,OADuB,EAEvBD,mBAAmB,CAACH,eAAe,CAACQ,cAAD,CAAhB,CAFI,CAAzB,CAL+D,CAU/D;;AACCC,EAAAA,KAAD,CAAqBC,QAArB,GAAgCF,cAAc,CAACG,GAAf,CAAmBN,QAAnB,CAAhC,CAX+D,CAa/D;;AACA,SAAOI,KAAP;AACD,CAfM;AAiBP,OAAO,IAAMG,OAAO,GAAGX,aAAa,CAAQK,SAAR,CAA7B","sourcesContent":["import { createStore, applyMiddleware, Store } from \"redux\";\nimport { MakeStore, createWrapper, Context } from \"next-redux-wrapper\";\nimport createSagaMiddleware, { Task } from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducer from \"../reducers\";\nimport rootSaga from \"../sagas\";\nimport { store } from \"../reducers/types\";\n\nexport interface SagaStore extends Store {\n  sagaTask?: Task;\n}\n\nexport const makeStore: MakeStore<store> = (context: Context) => {\n  // 1: Create the middleware\n  const sagaMiddleware = createSagaMiddleware();\n\n  // 2: Add an extra parameter for applying middleware:\n  const store = createStore(\n    reducer,\n    composeWithDevTools(applyMiddleware(sagaMiddleware))\n  );\n\n  // 3: Run your sagas on server\n  (store as SagaStore).sagaTask = sagaMiddleware.run(rootSaga);\n\n  // 4: now return the store:\n  return store;\n};\n\nexport const wrapper = createWrapper<store>(makeStore);\n"]},"metadata":{},"sourceType":"module"}